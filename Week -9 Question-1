Ques1.  Given a graph, Design an algorithm and implement it using a program to implement FloydWarshall all pair shortest path algorithm.

Input Format: 
The first line of input takes number of vertices in the graph. 
Input will be the graph in the form of adjacency matrix or adjacency list. If a direct edge is not
present between any pair of vertex (u,v), then this entry is shown as AdjM[u,v] = INF.
Output Format: 
Output will be shortest distance matrix in the form of V X V matrix, where each entry (u,v)
represents shortest distance between vertex u and vertex v.
*/

#include <bits/stdc++.h>
using namespace std;
#define V 5
#define INF 99999

void printSolution(int dist[][V]);

void floydWarshall(int graph[][V])
{
    int dist[V][V], i, j, k;

    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];

    
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][j] > (dist[i][k] + dist[k][j])
                    && (dist[k][j] != INF
                        && dist[i][k] != INF))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
}

void printSolution(int dist[][V])
{
    cout << "Shortest Distance Matrix: "<<endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF"
                    << "     ";
            else
                cout << dist[i][j] << "  ";
        }
        cout << endl;
    }
}

int main()
{
    int graph[V][V] = { {0, 10, 5, 5, INF},
                        {INF, 0, 5, 5, 5},
                        {INF, INF, 0, INF, 10},
                        {INF, INF, INF, 0, 20},
                        {INF, INF, INF, 5, 0}};

    floydWarshall(graph);
    return 0;
}
